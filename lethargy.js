// Generated by CoffeeScript 1.9.2
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.Lethargy = (function() {
    function Lethargy(range, tolerance) {
      this.range = range != null ? Math.abs(range) : 5;
      this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;
      this.lastUpDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.range * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(0);
        }
        return results;
      }).call(this);
      this.lastDownDeltas = (function() {
        var i, ref, results;
        results = [];
        for (i = 1, ref = this.range * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
          results.push(0);
        }
        return results;
      }).call(this);
    }

    Lethargy.prototype.check = function(e) {
      var lastDelta, temp;
      lastDelta = e.originalEvent.wheelDelta;
      if (lastDelta > 0) {
        this.lastUpDeltas.push(lastDelta);
        this.lastUpDeltas.shift();
        temp = this.isInertia(1);
        return this.isInertia(1);
      } else {
        this.lastDownDeltas.push(lastDelta);
        this.lastDownDeltas.shift();
        temp = this.isInertia(-1);
        return this.isInertia(-1);
      }
      return false;
    };

    Lethargy.prototype.isInertia = function(direction) {
      var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;
      lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;
      lastDeltasOld = lastDeltas.slice(0, this.range);
      lastDeltasNew = lastDeltas.slice(this.range, this.range * 2);
      oldSum = lastDeltasOld.reduce(function(t, s) {
        return t + s;
      });
      newSum = lastDeltasNew.reduce(function(t, s) {
        return t + s;
      });
      oldAverage = oldSum / lastDeltasOld.length;
      newAverage = newSum / lastDeltasNew.length;
      if ((oldAverage * direction) < (newAverage * direction * this.tolerance) && (Math.abs(oldAverage) > 100)) {
        return false;
      } else {
        return true;
      }
    };

    Lethargy.prototype.showLastUpDeltas = function() {
      return console.log(this.lastUpDeltas);
    };

    Lethargy.prototype.showLastDownDeltas = function() {
      return console.log(this.lastDownDeltas);
    };

    return Lethargy;

  })();

}).call(this);
